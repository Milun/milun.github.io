"use strict";(self.webpackChunkforge=self.webpackChunkforge||[]).push([[194],{525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=n(4848),r=n(8453);const o={sidebar_position:2},s="width",c={id:"templates/objects/width",title:"width",description:"Description",source:"@site/docs/templates/objects/width.md",sourceDirName:"templates/objects",slug:"/templates/objects/width",permalink:"/forge-docs/templates/objects/width",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"_graphic",permalink:"/forge-docs/templates/objects/graphic"},next:{title:"Debug tools",permalink:"/forge-docs/debug"}},d={},l=[{value:"Description",id:"description",level:3}];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{JSYNT:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("JSYNT",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"width",children:"width"}),"\n",(0,i.jsx)(n,{title:"Examples",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"_graphic": {\r\n    "width": 12,\r\n\r\n    <<<! Not yet implemented !>>>\r\n    "width": "100%",\r\n    "width": "20rem"\r\n}\n'})})}),"\n",(0,i.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"_width"})," property is how you specify what width you want a particular element to be (in the above example, the width of the graphic)."]}),"\n",(0,i.jsx)(t.p,{children:"There are two different ways to set the width:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If the value is a real number (not surrounded by ",(0,i.jsx)(t.code,{children:'""'}),"), then it will be in increments of 1/12. ",(0,i.jsx)("br",{}),"\r\n",(0,i.jsx)(t.code,{children:"12"})," = ",(0,i.jsx)(t.code,{children:"100%"}),(0,i.jsx)("br",{}),"\r\n",(0,i.jsx)(t.code,{children:"6"})," = ",(0,i.jsx)(t.code,{children:"50%"}),(0,i.jsx)("br",{}),"\r\n",(0,i.jsx)(t.code,{children:"3"})," = ",(0,i.jsx)(t.code,{children:"25%"}),", etc.",(0,i.jsx)("br",{}),"\r\nThis is similar to how Bootstrap does things."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"(Not implemented yet!)"})," If the value is a string (surrounded by ",(0,i.jsx)(t.code,{children:'""'}),"), then you can use any CSS width you desire (percentages, rem, etc.).",(0,i.jsx)("br",{}),"\r\n",(0,i.jsx)(t.strong,{children:"Do not use 'px' though!"})]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Unless you need to be precise, try to use the 1-12 sizing if you can. It keeps the layout more consistent."})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(6540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);
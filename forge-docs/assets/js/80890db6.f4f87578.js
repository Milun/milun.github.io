"use strict";(self.webpackChunkforge=self.webpackChunkforge||[]).push([[194],{525:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=t(4848),s=t(8453);const o={sidebar_position:2},d="width & widthMax",r={id:"templates/objects/width",title:"width & widthMax",description:"Description",source:"@site/docs/templates/objects/width.md",sourceDirName:"templates/objects",slug:"/templates/objects/width",permalink:"/forge-docs/templates/objects/width",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"_graphic",permalink:"/forge-docs/templates/objects/graphic"},next:{title:"Debug tools",permalink:"/forge-docs/debug"}},c={},l=[{value:"Description",id:"description",level:2},{value:"Responsiveness",id:"responsiveness",level:3},{value:"Decimal points",id:"decimal-points",level:3},{value:"<code>widthMax</code>",id:"widthmax",level:3}];function h(e){const i={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{JSYNT:t}=i;return t||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("JSYNT",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"width--widthmax",children:"width & widthMax"}),"\n",(0,n.jsx)(t,{title:"Examples",children:(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:'"_graphic": {\r\n    "width": "12",\r\n    <<<! Or !>>>\r\n    "width": "sm-4.5",\r\n\r\n    "widthMax": "",\r\n    <<<! Or !>>>\r\n    "widthMax": "6.25",\r\n}\n'})})}),"\n",(0,n.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"width"})," property is how you specify what width you want a particular element to be (in the above example, the width of the graphic)."]}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"width"})," value must be a number between ",(0,n.jsx)(i.code,{children:"1"}),"-",(0,n.jsx)(i.code,{children:"12"})," (inclusive), with ",(0,n.jsx)(i.code,{children:"1"})," being ",(0,n.jsx)(i.code,{children:"1/12*100%"}),' width ("one twelvth of the width"), and ',(0,n.jsx)(i.code,{children:"12"})," therefore being ",(0,n.jsx)(i.code,{children:"100%"})," width."]}),"\n",(0,n.jsx)(i.h3,{id:"responsiveness",children:"Responsiveness"}),"\n",(0,n.jsxs)(i.p,{children:["I have set it up so that, when the screen size is ",(0,n.jsx)(i.em,{children:"smaller"})," than ",(0,n.jsx)(i.code,{children:"md"})," (medium), the ",(0,n.jsx)(i.code,{children:"width"}),' will automatically change to "100%", regardless of what you\'ve set it to. This should make for a good layout in most cases, however, if you need to adjust it, you can do the following:']}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'"width": "6",'}),' means "Set the width to 50% when my screen-size is ',(0,n.jsx)(i.code,{children:"md"})," ",(0,n.jsx)(i.em,{children:"or larger"}),'".']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'"width": "sm-6",'}),' means "Set the width to 50% when my screen-size is ',(0,n.jsx)(i.code,{children:"sm"})," ",(0,n.jsx)(i.em,{children:"or larger"}),'".']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'"width": "lg-3",'}),' means "Set the width to 25% when my screen-size is ',(0,n.jsx)(i.code,{children:"lg"})," ",(0,n.jsx)(i.em,{children:"or larger"}),'". Meaning that the width will be "100%" when your device is ',(0,n.jsx)(i.code,{children:"md"})," ",(0,n.jsx)(i.em,{children:"or smaller"}),"."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"decimal-points",children:"Decimal points"}),"\n",(0,n.jsxs)(i.p,{children:["You are not restricted to using whole numbers. ",(0,n.jsx)(i.code,{children:"width"})," will accept multiples of ",(0,n.jsx)(i.code,{children:"0.25"}),", meaning that a value like ",(0,n.jsx)(i.code,{children:"5.75"})," is also acceptable."]}),"\n",(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsx)(i.p,{children:"Try to use whole numbers if you can. The decimals feature was mainly added for niche scenarios."})}),"\n",(0,n.jsx)(i.h3,{id:"widthmax",children:(0,n.jsx)(i.code,{children:"widthMax"})}),"\n",(0,n.jsxs)(i.p,{children:["You can control the element's width further by using ",(0,n.jsx)(i.code,{children:"widthMax"}),". ",(0,n.jsx)(i.code,{children:"widthMax"})," will prevent the contents ",(0,n.jsx)(i.em,{children:"inside"})," your element from exceeding a certain, fixed size. It's a bit hard to explain, but give it a try and you'll see what I mean."]}),"\n",(0,n.jsx)(i.p,{children:"It can be particularly useful when you have wildly varying aspect ratios for an image set (i.e., a tall one + a wide one)."}),"\n",(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsxs)(i.p,{children:["In most cases, you won't need to set ",(0,n.jsx)(i.code,{children:"widthMax"}),". It is set to calculate itself automatically if left at ",(0,n.jsx)(i.code,{children:"0"}),' or "".']})})]})}function a(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>d,x:()=>r});var n=t(6540);const s={},o=n.createContext(s);function d(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);
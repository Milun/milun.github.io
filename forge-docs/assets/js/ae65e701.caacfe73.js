"use strict";(self.webpackChunkforge=self.webpackChunkforge||[]).push([[919],{9272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=t(4848),s=t(8453);const o={sidebar_position:1},r="JSYNT",l={id:"overview/forge/jsynt",title:"JSYNT",description:"The content in Forge is built using jsynt, a modified version of the json data format made for Forge and projects like it.",source:"@site/docs/overview/forge/jsynt.md",sourceDirName:"overview/forge",slug:"/overview/forge/jsynt",permalink:"/forge-docs/overview/forge/jsynt",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Forge Framework",permalink:"/forge-docs/overview/forge/"},next:{title:"Course structure",permalink:"/forge-docs/overview/forge/course"}},c={},a=[{value:"Differences to JSON",id:"differences-to-json",level:2},{value:"Multiline strings",id:"multiline-strings",level:4},{value:"Comments",id:"comments",level:4},{value:"Syntax highlighting",id:"syntax-highlighting",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",img:"img",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"jsynt",children:"JSYNT"}),"\n",(0,i.jsxs)(n.p,{children:["The content in Forge is built using ",(0,i.jsx)(n.code,{children:"jsynt"}),", a modified version of the ",(0,i.jsx)(n.code,{children:"json"})," data format made for Forge and projects like it."]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of how it looks in the VSCode editor:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"JSYNT 1",src:t(7306).A+"",width:"895",height:"426"})}),"\n",(0,i.jsx)(n.h2,{id:"differences-to-json",children:"Differences to JSON"}),"\n",(0,i.jsx)(n.p,{children:"If you are familiar with JSON, you'll notice several additional features that JSYNT has."}),"\n",(0,i.jsx)(n.h4,{id:"multiline-strings",children:"Multiline strings"}),"\n",(0,i.jsxs)(n.p,{children:["The most useful feature of JSYNT is the support for multiline strings using the ",(0,i.jsx)(n.code,{children:'<<<"...">>>'})," tags."]}),"\n",(0,i.jsx)(n.p,{children:"Within these tags, you are completely unrestricted. If you are familiar with JSON, here's the features you can use in JSYNT that JSON does not allow in strings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tab characters"}),"\n",(0,i.jsx)(n.li,{children:"Return characters"}),"\n",(0,i.jsxs)(n.li,{children:["Unescaped ",(0,i.jsx)(n.code,{children:"\\"})," and ",(0,i.jsx)(n.code,{children:'"'})," characters"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In essence, you can write HTML inside of these tags in the same way you would a normal ",(0,i.jsx)(n.code,{children:".html"})," document."]}),"\n",(0,i.jsx)(n.h4,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike JSON (which usually has no comment support), JSYNT allows for comments using ",(0,i.jsx)(n.code,{children:"<<<!...!>>>"})," tags. Nothing that is written between these tags will ever be visible to the end user."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-highlighting",children:"Syntax highlighting"}),"\n",(0,i.jsxs)(n.p,{children:["You'll notice that code within the ",(0,i.jsx)(n.code,{children:'<<<"...">>>'})," tags has HTML syntax highlighting."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7306:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/forge-jsynt-1-fc411a21c98d343c9c4b0a4661b26636.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
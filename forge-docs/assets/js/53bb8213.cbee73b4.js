"use strict";(self.webpackChunkforge=self.webpackChunkforge||[]).push([[141],{7282:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=o(4848),s=o(8453);const i={sidebar_position:5},r="Customization",c={id:"advanced/custom",title:"Customization",description:"When the core functionality of Forge isn't enough, and you need a one-off feature, you can follow the following techniques to add custom functionality.",source:"@site/docs/advanced/custom.md",sourceDirName:"advanced",slug:"/advanced/custom",permalink:"/forge-docs/advanced/custom",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Advanced",permalink:"/forge-docs/advanced/"},next:{title:"Color-changing SVGs",permalink:"/forge-docs/advanced/svg"}},a={},d=[{value:"Custom CSS",id:"custom-css",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"customization",children:"Customization"}),"\n",(0,t.jsx)(n.p,{children:"When the core functionality of Forge isn't enough, and you need a one-off feature, you can follow the following techniques to add custom functionality."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Before adding a custom feature, determine how many times it will be re-used, and across how many courses. If the feature is common enough, it may be worth implementing in the core Forge framework. In this case, please discuss with your developer."})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsx)(n.p,{children:"Custom features you add are not guaranteed to work forever."}),(0,t.jsx)(n.p,{children:"If a significant-enough update is made to Forge's content, your customs may need to be adjusted to suit."})]}),"\n",(0,t.jsx)(n.h2,{id:"custom-css",children:"Custom CSS"}),"\n",(0,t.jsxs)(n.p,{children:["The quickest (and easiest) way to make minor ",(0,t.jsx)(n.em,{children:"visual"})," adjustments to your content is through the use of custom CSS. Inside of every ",(0,t.jsx)(n.code,{children:"b-*"})," content directory is a generated ",(0,t.jsx)(n.code,{children:"style.less"})," file. In it, you can add your own CSS, or ",(0,t.jsx)(n.a,{href:"https://lesscss.org/",children:"LESSCSS"})," styles to customize your block."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if I add the following into ",(0,t.jsx)(n.code,{children:"b-1/style.less"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"* {\n    color: purple;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It will make ",(0,t.jsx)(n.strong,{children:"all"})," the text inside of the ",(0,t.jsx)(n.code,{children:"b-1"})," block purple."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Use Chrome's inspector window to learn what each of the block's HTML element classes are, and use them as selectors."})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
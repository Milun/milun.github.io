"use strict";(self.webpackChunkforge=self.webpackChunkforge||[]).push([[113],{2815:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=t(4848),s=t(8453);const i={sidebar_position:5},r="Customization",c={id:"custom",title:"Customization",description:"When the core functionality of Forge isn't enough, and you need a one-off feature, you can follow the following techniques to add custom functionality.",source:"@site/docs/custom.md",sourceDirName:".",slug:"/custom",permalink:"/forge-docs/custom",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Debug tools",permalink:"/forge-docs/debug"}},a={},d=[{value:"Custom CSS",id:"custom-css",level:2}];function u(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"customization",children:"Customization"}),"\n",(0,n.jsx)(o.p,{children:"When the core functionality of Forge isn't enough, and you need a one-off feature, you can follow the following techniques to add custom functionality."}),"\n",(0,n.jsx)(o.admonition,{type:"info",children:(0,n.jsx)(o.p,{children:"Before adding a custom feature, determine how many times it will be re-used, and across how many courses. If the feature is common enough, it may be worth implementing in the core Forge framework. In this case, please discuss with your developer."})}),"\n",(0,n.jsxs)(o.admonition,{type:"warning",children:[(0,n.jsx)(o.p,{children:"Custom features you add are not guaranteed to work forever."}),(0,n.jsx)(o.p,{children:"If a significant-enough update is made to Forge's content, your customs may need to be adjusted to suit."})]}),"\n",(0,n.jsx)(o.h2,{id:"custom-css",children:"Custom CSS"}),"\n",(0,n.jsxs)(o.p,{children:["The quickest (and easiest) way to make minor ",(0,n.jsx)(o.em,{children:"visual"})," adjustments to your content is through the use of custom CSS. Inside of every ",(0,n.jsx)(o.code,{children:"b-*"})," content directory is a generated ",(0,n.jsx)(o.code,{children:"style.less"})," file. In it, you can add your own CSS, or ",(0,n.jsx)(o.a,{href:"https://lesscss.org/",children:"LESSCSS"})," styles to customize your block."]}),"\n",(0,n.jsxs)(o.p,{children:["For example, if I add the following into ",(0,n.jsx)(o.code,{children:"b-1/style.less"}),":"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-css",children:"* {\n    color: purple;\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["It will make ",(0,n.jsx)(o.strong,{children:"all"})," the text inside of the ",(0,n.jsx)(o.code,{children:"b-1"})," block purple."]}),"\n",(0,n.jsx)(o.admonition,{type:"tip",children:(0,n.jsx)(o.p,{children:"Use Chrome's inspector window to learn what each of the block's HTML element classes are, and use them as selectors."})})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>c});var n=t(6540);const s={},i=n.createContext(s);function r(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);
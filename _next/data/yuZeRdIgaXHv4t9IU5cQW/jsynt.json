{"pageProps":{"post":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components), {Hyperlink} = _components;\n  if (!Hyperlink) _missingMdxReference(\"Hyperlink\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"When developing the \", _jsx(Hyperlink, {\n        href: \"/sit\",\n        children: \"SIT Training Packages\"\n      }), \" frameworks, a data format needed to be chosen to store the complex settings and large amount of HTML5 strings that each page of learning material would require.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Initial trials using JSON were effective, but proved inefficient to create for the large eBooks, so I created JSYNT. An extension of the JSON format, JSYNT adds support for human-readable, multiline HTML5 strings as values, as well as comments and other quality-of-life improvements. At build time, it is minified into normal JSON with Node.js.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JSYNT ended up halving our development time.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"test":"ERROR"}},"data":{"id":"jsynt","content":"import Image from 'next/image';\r\nimport Accordion from \"@components/Accordion\";\r\nimport Hyperlink from \"@components/Hyperlink\";\r\n\r\nWhen developing the <Hyperlink href='/sit'>SIT Training Packages</Hyperlink> frameworks, a data format needed to be chosen to store the complex settings and large amount of HTML5 strings that each page of learning material would require.\r\n\r\nInitial trials using JSON were effective, but proved inefficient to create for the large eBooks, so I created JSYNT. An extension of the JSON format, JSYNT adds support for human-readable, multiline HTML5 strings as values, as well as comments and other quality-of-life improvements. At build time, it is minified into normal JSON with Node.js.\r\n\r\nJSYNT ended up halving our development time.","carousel":["1.jpg","2.jpg"],"title":"JSYNT","desc":"Custom JSON language","thumbnail":"tba.svg","role":"Developer","date":2021,"tags":["Node.js","JSON","HTML5","Handlebars.js","tmLanguage"]}}},"__N_SSG":true}
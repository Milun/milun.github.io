{"pageProps":{"post":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Accordion} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Engaging, interactive and \", _jsx(_components.a, {\n        href: \"https://educationalpublishing.com.au/book/programming-essentials/%22\",\n        children: \"award winning\"\n      }), \" responsive eBooks.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For this project, I developed interactive web-based learning material by heavily customizing the \", _jsx(_components.a, {\n        href: \"https://www.adaptlearning.org/\",\n        children: \"Adapt learning framework\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The learning material required a wide range of custom UX components, ranging from live-code execution, to complex dynamic animations. Designing these had me collaborating with our subject matter experts and instructional designers to ensure each component clearly demonstrated the learning material it was teaching.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Check out a \", _jsx(_components.a, {\n        href: \"\",\n        children: \"sample\"\n      }), \" here.\"]\n    }), \"\\n\", _jsxs(Accordion, {\n      children: [_jsx(_components.p, {\n        children: \"The UX components were made using Backbone.js, Handlebars, and jQuery libraries for both mobile and desktop screens (with some components changing their behaviour entirely to suit the smaller device).\"\n      }), _jsx(_components.p, {\n        children: \"The greatest challenge for this project came after its completion, when it was requested by a client that support for the ePub (eBook) format be added. The ePub format required XHTML be used instead of HTML5, as well as having limited CSS and JavaScript support. I accomplished this task by adding a third, simplified \\\"epub\\\" view for each component, which node.js would substitute in whenever ePubs were built.\"\n      }), _jsx(_components.p, {\n        children: \"In addition to framework maintenance and content development, at times I also took on the role of Subject Matter Expert. Several of the programming units we published for Higher-education had my involvement as a co-writer and proofreader.\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"data":{"id":"isc","content":"\r\nimport Image from 'next/image';\r\nimport Accordion from \"@components/Accordion\";\r\nimport Link from \"next/link\";\r\n\r\nEngaging, interactive and [award winning](https://educationalpublishing.com.au/book/programming-essentials/\") responsive eBooks.\r\n\r\nFor this project, I developed interactive web-based learning material by heavily customizing the [Adapt learning framework](https://www.adaptlearning.org/).\r\n\r\nThe learning material required a wide range of custom UX components, ranging from live-code execution, to complex dynamic animations. Designing these had me collaborating with our subject matter experts and instructional designers to ensure each component clearly demonstrated the learning material it was teaching.\r\n\r\nCheck out a [sample]() here.\r\n\r\n<Accordion>\r\n    The UX components were made using Backbone.js, Handlebars, and jQuery libraries for both mobile and desktop screens (with some components changing their behaviour entirely to suit the smaller device).\r\n\r\n\tThe greatest challenge for this project came after its completion, when it was requested by a client that support for the ePub (eBook) format be added. The ePub format required XHTML be used instead of HTML5, as well as having limited CSS and JavaScript support. I accomplished this task by adding a third, simplified \"epub\" view for each component, which node.js would substitute in whenever ePubs were built.\r\n\r\n\tIn addition to framework maintenance and content development, at times I also took on the role of Subject Matter Expert. Several of the programming units we published for Higher-education had my involvement as a co-writer and proofreader.\r\n</Accordion>\r\n\r\n","carousel":["ChromeBall3.png","VW2.png"],"title":"Industry Short Courses","desc":"E-learning material for TAFE and Higher-education","thumbnail":"tba.svg","role":"Lead developer","date":2020,"tags":["Adobe suite","LESSCSS","JavaScript","jQuery","HTML5","XHTML","Node.js","Backbone.js","Frontend","Handlebars.js","Adapt Learning Framework","EPUB","Instructional design"]}}},"__N_SSG":true}
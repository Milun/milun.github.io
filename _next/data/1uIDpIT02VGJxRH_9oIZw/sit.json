{"pageProps":{"post":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Accordion, Link} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Link) _missingMdxReference(\"Link\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Web-based training packages; designed with a desktop/tablet first approach.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I was the primary developer for this project, and created a JavaScript framework that automated the content's design, interactive elements, and \", _jsx(_components.a, {\n        href: \"https://scorm.com/scorm-explained/one-minute-scorm-overview/?utm_source=google&utm_medium=natural_search\",\n        children: \"LMS (SCORM)\"\n      }), \" integration.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Check out a \", _jsx(_components.a, {\n        href: \"\",\n        children: \"sample course\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(Accordion, {\n      children: [_jsxs(_components.p, {\n        children: [\"To streamline eBook development (and make it accessible to the majority of my team), I designed the framework to allow content creation with only an entry level of HTML and \", _jsx(Link, {\n          href: \"/jsynt\",\n          children: \"JSYNT\"\n        }), \" knowledge, with the option for custom functionality depending on coding skill.\"]\n      }), _jsx(_components.p, {\n        children: \"This data was then inserted into a series of interactive page templates made with Backbone.js, Handlebars and LESSCSS, which were then built into distributable SCORM packages using a multitude of Grunt.js tasks.\"\n      }), _jsx(_components.p, {\n        children: \"Due to the fixed size of the content, the greatest challenge I faced when designing each template was fitting text and assets of various dimensions without overflowing its bounds. I solved this by creating a lightweight 3×3 grid plugin that would allow for full control over where each element was placed, without the need for custom CSS. Every layout in the examples above is created using this plugin.\"\n      }), _jsxs(_components.p, {\n        children: [\"To date, my framework has been used to create \", _jsx(_components.a, {\n          href: \"https://www.didasko-online.com/sit21-unit-list/\",\n          children: \"over 100 units\"\n        }), \".\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"data":{"id":"sit","content":"import Image from 'next/image';\r\nimport Accordion from \"@components/Accordion\";\r\nimport Link from \"next/link\";\r\n\r\nWeb-based training packages; designed with a desktop/tablet first approach.\r\n\r\nI was the primary developer for this project, and created a JavaScript framework that automated the content's design, interactive elements, and [LMS (SCORM)](https://scorm.com/scorm-explained/one-minute-scorm-overview/?utm_source=google&utm_medium=natural_search) integration.\r\n\r\nCheck out a [sample course]().\r\n\r\n<Accordion>\r\nTo streamline eBook development (and make it accessible to the majority of my team), I designed the framework to allow content creation with only an entry level of HTML and <Link href='/jsynt'>JSYNT</Link> knowledge, with the option for custom functionality depending on coding skill.\r\n\r\nThis data was then inserted into a series of interactive page templates made with Backbone.js, Handlebars and LESSCSS, which were then built into distributable SCORM packages using a multitude of Grunt.js tasks.\r\n\r\nDue to the fixed size of the content, the greatest challenge I faced when designing each template was fitting text and assets of various dimensions without overflowing its bounds. I solved this by creating a lightweight 3×3 grid plugin that would allow for full control over where each element was placed, without the need for custom CSS. Every layout in the examples above is created using this plugin.\r\n\r\nTo date, my framework has been used to create [over 100 units](https://www.didasko-online.com/sit21-unit-list/).\r\n</Accordion>","carousel":["1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg"],"title":"SIT Training Packages","desc":"E-learning for tourism, travel and hospitality industries","thumbnail":"tba.svg","role":"Lead developer","date":2023,"tags":["Adobe suite","LESSCSS","JavaScript","HTML5","Node.js","Grunt.js","Backbone.js","Frontend","Handlebars.js"]}}},"__N_SSG":true}
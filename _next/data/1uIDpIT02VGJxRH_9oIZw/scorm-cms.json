{"pageProps":{"post":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Link, Accordion} = _components;\n  if (!Accordion) _missingMdxReference(\"Accordion\", true);\n  if (!Link) _missingMdxReference(\"Link\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"During production of the \", _jsx(Link, {\n        href: \"/isc\",\n        children: \"Industry Short Courses\"\n      }), \" project, my team received requests from several clients to include custom permutations to the eBooks (for example, the inclusion/exclusion of several paragraphs). This required us to maintain multiple versions of each eBook, which would increase overhead.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To resolve this, I developed a content management system using Node.js & Grunt.js that would be able to apply these permutations, as well as automating a majority of our other build processes. With the ability to update, modify, and compile eBooks, this system ended up streamlining content management and increased efficiency for the entire organization.\"\n    }), \"\\n\", _jsxs(Accordion, {\n      children: [_jsx(_components.p, {\n        children: \"In order to define permutations in our eBooks, I combined BEM naming conventions with JSON. A developer would define client-specific permutations within the same JSON file by using 'modifiers':\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\r\\n    \\\"body\\\":             \\\"Default text\\\",\\r\\n    \\\"body--client1\\\":    \\\"Client1's body text\\\",\\r\\n    \\\"body--client2\\\":    \\\"\\\"\\r\\n}\\n\"\n        })\n      }), _jsx(_components.p, {\n        children: \"At which point, at build time, the CMS would substitute one value with another depending on the modifiers it was provided.\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"data":{"id":"scorm-cms","content":"import Image from 'next/image';\r\nimport Accordion from \"@components/Accordion\";\r\nimport Link from \"next/link\";\r\n\r\nDuring production of the <Link href=\"/isc\">Industry Short Courses</Link> project, my team received requests from several clients to include custom permutations to the eBooks (for example, the inclusion/exclusion of several paragraphs). This required us to maintain multiple versions of each eBook, which would increase overhead.\r\n\r\nTo resolve this, I developed a content management system using Node.js & Grunt.js that would be able to apply these permutations, as well as automating a majority of our other build processes. With the ability to update, modify, and compile eBooks, this system ended up streamlining content management and increased efficiency for the entire organization.\r\n\r\n<Accordion>\r\n    In order to define permutations in our eBooks, I combined BEM naming conventions with JSON. A developer would define client-specific permutations within the same JSON file by using 'modifiers':\r\n\r\n    ```\r\n    {\r\n        \"body\":             \"Default text\",\r\n        \"body--client1\":    \"Client1's body text\",\r\n        \"body--client2\":    \"\"\r\n    }\r\n    ```\r\n\r\n    At which point, at build time, the CMS would substitute one value with another depending on the modifiers it was provided. \r\n</Accordion>","carousel":["1.jpg","2.jpg","3.jpg","4.jpg","5.jpg","6.jpg"],"title":"eBook CMS","desc":"Custom content management system for building eBooks","thumbnail":"tba.svg","role":"Developer","date":2020,"tags":["Node.js","Grunt.js","JavaScript","BatchScript"]}}},"__N_SSG":true}